{"version":3,"sources":["components/Conversation.js","components/UserLoginBox.js","components/Register.js","components/Thanks.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["window","$","Conversation","props","AppendUserConvo","bind","path","this","history","push","UserComment","document","getElementById","value","innerHTML","scrollTop","scrollHeight","val","id","type","placeholder","defaultValue","onClick","nextPath","React","Component","UserLoginBox","ChkSignIn","LoginUseName","Loginpin","style","display","className","Register","ChkSuccessReg","FirstName","UseName","EmailAdd","pin","Thanks","App","exact","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9532c921.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../css/ConversationStyle.css';\r\nimport $ from 'jquery';\r\n\r\nwindow.$ = $;\r\n\r\nclass Conversation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.AppendUserConvo = this.AppendUserConvo.bind(this);\r\n    }\r\n\r\n    nextPath(path) {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    AppendUserConvo() {\r\n        var UserComment = document.getElementById(\"ConvoUserInput\").value;\r\n        document.getElementById(\"ConvoHistory\").innerHTML += '<p id=\"UserComment\">' + UserComment + '</p>';\r\n        document.getElementById(\"ConvoHistory\").innerHTML += '<p id=\"TherabotComment\">' + \"FLARP FLERP FLORP\" + '</p>';\r\n        $('#ConvoHistory').scrollTop($('#ConvoHistory')[0].scrollHeight);\r\n        $('#ConvoUserInput').val('');\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\t\t<h1>Welcome to Therabot</h1>\r\n        <div id=\"ContainerBox\">\r\n          <textarea\r\n            id=\"ConvoUserInput\"\r\n            type=\"text\"\r\n            placeholder=\"What's on your mind?\"\r\n            defaultValue={\"\"}\r\n          />\r\n          <div id=\"ConvoHistory\" />\r\n        </div>\r\n        <div id=\"Buttons\">\r\n          <button\r\n            id=\"LeaveRoom\"\r\n            type=\"button\"\r\n            onClick={() => this.nextPath('/thankyou')}\r\n          >\r\n            Leave Chatroom\r\n          </button>\r\n          <button\r\n            id=\"UserSubmitConvo\"\r\n            type=\"button\"\r\n            onClick={this.AppendUserConvo}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Conversation;\r\n","import React from \"react\";\nimport '../css/IndexStyle.css';\n\nclass UserLoginBox extends React.Component {\n  constructor(props) {\n      super(props);\n      this.ChkSignIn = this.ChkSignIn.bind(this);\n  }\n\n  nextPath(path) {\n    this.props.history.push(path);\n  }\n\n  ChkSignIn() {\n      var LoginUseName = document.getElementById(\"LoginUseName\").value;\n      var Loginpin = document.getElementById(\"LoginPIN\").value;\n      if (LoginUseName === \"\" || Loginpin === \"\") {\n        document.getElementById(\"SignInNotSuccess\").style.display = \"block\";\n      } else {\n        document.getElementById(\"SignInNotSuccess\").style.display = \"none\";\n        this.nextPath('/talk');\n      }\n  }\n\n    render() {\n    return (\n      <div>\n        <h1>Welcome to Therabot</h1>\n        <div id=\"MainBox\">\n          <div id=\"MainBoxBanner\">\n            <div id=\"MainTextBox\">User Login</div>\n          </div>\n          <input type=\"text\" id=\"LoginUseName\" placeholder=\"Username\" />\n          <input type=\"text\" id=\"LoginPIN\" placeholder=\"Enter your PIN\" />\n          <button className=\"RegisterButton\" type=\"button\" onClick={() => this.nextPath('/register')}>\n\t\t\tClick here to register\n          </button>\n          <button className=\"SignInButton\" type=\"submit\" onClick={this.ChkSignIn}>\n\t\t\tSign in\n          </button>\n          <div id=\"SignInNotSuccess\" style={{display: \"none\"}}>\n            Cannot sign in. Please make sure all fields are filled out.\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserLoginBox;\n","import React from \"react\";\r\nimport '../css/RegisterPageStyle.css';\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.ChkSuccessReg = this.ChkSuccessReg.bind(this);\r\n    }\r\n\r\n    nextPath(path) {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    ChkSuccessReg() {\r\n        var FirstName = document.getElementById(\"FirstName\").value;\r\n        var UseName = document.getElementById(\"UseName\").value;\r\n        var EmailAdd = document.getElementById(\"EmailAdd\").value;\r\n        var pin = document.getElementById(\"pin\").value;\r\n        if (FirstName === \"\" || UseName === \"\" || EmailAdd === \"\" || pin === \"\") {\r\n            document.getElementById(\"success\").style.display = \"none\";\r\n            document.getElementById(\"notsuccess\").style.display = \"block\";\r\n        } else {\r\n            document.getElementById(\"success\").style.display = \"block\";\r\n            document.getElementById(\"BackToLogin\").style.display = \"block\";\r\n            document.getElementById(\"notsuccess\").style.display = \"none\";\r\n            document.getElementById(\"FirstName\").style.display = \"none\";\r\n            document.getElementById(\"UseName\").style.display = \"none\";\r\n            document.getElementById(\"EmailAdd\").style.display = \"none\";\r\n            document.getElementById(\"pin\").style.display = \"none\";\r\n            document.getElementById(\"DoneButton\").style.display = \"none\";\r\n        }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\t\t<h1>Welcome to Therabot</h1>\r\n        <div id=\"MainBox\">\r\n          <div id=\"MainBoxBanner\">\r\n            <div id=\"MainTextBox\">Register</div>\r\n          </div>\r\n          <input type=\"text\" id=\"FirstName\" placeholder=\"First name\" />\r\n          <div id=\"TextMargin\">\r\n            <input type=\"text\" id=\"UseName\" placeholder=\"Username\" />\r\n            <input type=\"text\" id=\"EmailAdd\" placeholder=\"E-mail address\" />\r\n            <input type=\"text\" id=\"pin\" placeholder=\"Please enter a custom PIN\"/>\r\n          </div>\r\n          <button id=\"DoneButton\" type=\"button\" onClick={this.ChkSuccessReg}>\r\n            Done\r\n          </button>\r\n          <div id=\"success\" style={{display: \"none\"}}>\r\n            Success! Please check your e-mail for your username and PIN.\r\n          </div>\r\n          <div id=\"notsuccess\"style={{display: \"none\"}}>\r\n            Registration was not successful. Please make sure all fields are filled out.\r\n          </div>\r\n                <button id=\"BackToLogin\" type=\"button\" onClick={() => this.nextPath('/')}\r\n            style={{display: \"none\"}}\r\n          >\r\n            Login\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React from \"react\";\nimport '../css/ThankYouPage.css';\n\nclass Thanks extends React.Component {\n  render() {\n    return <p>Thank you for using Therabot!</p>;\n  }\n}\n\nexport default Thanks;\n","import React from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport Conversation from './components/Conversation';\nimport UserLoginBox from './components/UserLoginBox';\nimport Register from './components/Register';\nimport Thanks from './components/Thanks';\nimport \"./css/MainStyle.css\";\n\nconst App = () => {\n    return (\n\t\t<HashRouter>\n\t\t\t\t<Route exact path='/' component={UserLoginBox} />\n\t\t\t\t<Route path='/register' component={Register} />\n\t\t\t\t<Route path='/talk' component={Conversation} />\n\t\t\t\t<Route path='/thankyou' component={Thanks} />\n\t\t</HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
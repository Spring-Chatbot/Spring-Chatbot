{"version":3,"sources":["components/Conversation.tsx","components/UserLoginBox.tsx","components/Register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Conversation","id","placeholder","defaultValue","type","onClick","document","getElementById","style","display","userComment","value","innerHTML","$","scrollTop","scrollHeight","val","UserLoginBox","history","useHistory","nextPath","path","push","className","LoginUserName","LoginPin","Register","getValue","FirstName","UseName","EmailAdd","Pin","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2f7772c.chunk.js","sourcesContent":["import React from \"react\";\n// import { useHistory } from \"react-router-dom\";\nimport \"../css/ConversationStyle.css\";\nimport $ from \"jquery\";\n//import firebase from \"../firebase.js\"\n\nexport default function Conversation() {\n    /* Unused (uncomment when needed)\n    let history = useHistory();\n    function nextPath(path: any) {\n        history.push(path);\n    }\n    */\n\n    function thankUser() {\n        document.getElementById(\"ContainerBox\")!.style.display = \"none\";\n        document.getElementById(\"Buttons\")!.style.display = \"none\";\n        if (document.getElementById(\"Welcome\") !== null)\n            document.getElementById(\"Welcome\")!.style.display = \"none\";\n        document.getElementById(\"thankyou\")!.style.display = \"block\";\n    }\n\n    function appendUserConvo() {\n        const userComment = (document.getElementById(\n            \"ConvoUserInput\"\n        )! as HTMLTextAreaElement).value;\n        //The next 2 comment blocks are the POST request to the firebase server\n        //When performing testing, please keep the POST request commented out\n        //and only use the dummy response, otherwise it will bloat the server\n        //with a bunch of useless documents\n\n        /*const myHeaders = new Headers();\n\t\tmyHeaders.append(\"Content-Type\", \"application/json\");\n\n\t\tconst raw = JSON.stringify({\"text\":userComment,\"userId\":\"User1\"});\n\n\t\tconst requestOptions = {\n\t\t  method: 'POST',\n\t\t  headers: myHeaders,\n\t\t  body: raw,\n\t\t  redirect: 'follow'\n\t\t};\n\t\t*/\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='UserComment'>\" + userComment + \"</p>\";\n        /*fetch(\"https://us-central1-cs-4800-backend-server.cloudfunctions.net/api/message\", requestOptions)\n\t\t  .then(response => response.text())\n\t\t  .then(result => document.getElementById(\"ConvoHistory\").innerHTML += '<p id=\"TherabotComment\">'+JSON.parse(result).message+'</p>')\n\t\t  .catch(error => console.log('error', error));\n\t\t*/\n\n        //DUMMY RESPONSE | ONLY USE FOR TESTING\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='TherabotComment'>Flarp Flerp Florp</p>\";\n        $(\"#ConvoHistory\").scrollTop($(\"#ConvoHistory\")[0].scrollHeight);\n        $(\"#ConvoUserInput\").val(\"\");\n    }\n\n    return (\n        <div>\n            <h1 id=\"Welcome\">Welcome to Therabot</h1>\n            <div id=\"ContainerBox\">\n                <textarea\n                    id=\"ConvoUserInput\"\n                    placeholder=\"What's on your mind?\"\n                    defaultValue={\"\"}\n                />\n                <div id=\"ConvoHistory\" />\n            <div id=\"Buttons\">\n                <button id=\"LeaveRoom\" type=\"button\" onClick={thankUser}>\n                    Leave Chatroom\n                </button>\n                <button\n                    id=\"UserSubmitConvo\"\n                    type=\"button\"\n                    onClick={appendUserConvo}\n                >\n                    Submit\n                </button>\n            </div>\n\t</div>\n            <div id=\"thankyou\" style={{ display: \"none\" }}>\n                <p>Thank you for using Therabot!</p>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/IndexStyle.css\";\n\nexport default function UserLoginBox() {\n    let history = useHistory();\n    function nextPath(path: any) {\n        history.push(path);\n    }\n\n    function CheckSignIn() {\n        const LoginUserName = (document.getElementById(\n            \"LoginUserName\"\n        )! as HTMLInputElement).value;\n        const LoginPin = (document.getElementById(\n            \"LoginPIN\"\n        )! as HTMLInputElement).value;\n        if (LoginUserName === \"\" || LoginPin === \"\") {\n            document.getElementById(\"SignInNotSuccess\")!.style.display =\n                \"block\";\n        } else {\n            document.getElementById(\"SignInNotSuccess\")!.style.display = \"none\";\n            nextPath(\"/talk\");\n        }\n    }\n\n    return (\n        <div>\n            <h1>Welcome to Therabot</h1>\n            <div id=\"MainBox\">\n                <div id=\"MainBoxBanner\">\n                    <div id=\"MainTextBox\">User Login</div>\n                </div>\n                <input type=\"text\" id=\"LoginUserName\" placeholder=\"Username\" />\n                <input type=\"text\" id=\"LoginPIN\" placeholder=\"Enter your PIN\" />\n                <div id=\"UserLoginButtons\">\n                <button\n                    className=\"RegisterButton\"\n                    type=\"button\"\n                    onClick={() => nextPath(\"/register\")}\n                >\n                    Click here to register\n                </button>\n                <button\n                    className=\"SignInButton\"\n                    type=\"submit\"\n                    onClick={CheckSignIn}\n                >\n                    Sign in\n                </button>\n                </div>\n                <div id=\"SignInNotSuccess\" style={{ display: \"none\" }}>\n                    Cannot sign in. Please make sure all fields are filled out.\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/RegisterPageStyle.css\";\n\nexport default function Register() {\n    let history = useHistory();\n    function nextPath(path: any) {\n        history.push(path);\n    }\n\n    function checkSuccessReg() {\n        const getValue = (id: string) =>\n            (document.getElementById(id)! as HTMLInputElement).value;\n\n        const FirstName = getValue(\"FirstName\");\n        const UseName = getValue(\"UseName\");\n        const EmailAdd = getValue(\"EmailAdd\");\n        const Pin = getValue(\"Pin\");\n\n        if (\n            FirstName === \"\" ||\n            UseName === \"\" ||\n            EmailAdd === \"\" ||\n            Pin === \"\"\n        ) {\n            document.getElementById(\"success\")!.style.display = \"none\";\n            document.getElementById(\"notsuccess\")!.style.display = \"block\";\n        } else {\n            document.getElementById(\"success\")!.style.display = \"block\";\n            document.getElementById(\"BackToLogin\")!.style.display = \"block\";\n            document.getElementById(\"notsuccess\")!.style.display = \"none\";\n            document.getElementById(\"FirstName\")!.style.display = \"none\";\n            document.getElementById(\"UseName\")!.style.display = \"none\";\n            document.getElementById(\"EmailAdd\")!.style.display = \"none\";\n            document.getElementById(\"Pin\")!.style.display = \"none\";\n            document.getElementById(\"DoneButton\")!.style.display = \"none\";\n        }\n    }\n\n    return (\n        <div>\n            <h1>Welcome to Therabot</h1>\n            <div id=\"MainBox\">\n                <div id=\"MainBoxBanner\">\n                    <div id=\"MainTextBox\">Register</div>\n                </div>\n                <input type=\"text\" id=\"FirstName\" placeholder=\"First name\" />\n                <div id=\"TextMargin\">\n                    <input type=\"text\" id=\"UseName\" placeholder=\"Username\" />\n                    <input\n                        type=\"text\"\n                        id=\"EmailAdd\"\n                        placeholder=\"E-mail address\"\n                    />\n                    <input\n                        type=\"text\"\n                        id=\"Pin\"\n                        placeholder=\"Please enter a custom PIN\"\n                    />\n                </div>\n                <button id=\"DoneButton\" type=\"button\" onClick={checkSuccessReg}>\n                    Done\n                </button>\n                <div id=\"success\" style={{ display: \"none\" }}>\n                    Success! Please check your e-mail for your username and PIN.\n                </div>\n                <div id=\"notsuccess\" style={{ display: \"none\" }}>\n                    Registration was not successful. Please make sure all fields\n                    are filled out.\n                </div>\n                <button\n                    id=\"BackToLogin\"\n                    type=\"button\"\n                    onClick={() => nextPath(\"/\")}\n                    style={{ display: \"none\" }}\n                >\n                    Login\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport Conversation from \"./components/Conversation\";\nimport UserLoginBox from \"./components/UserLoginBox\";\nimport Register from \"./components/Register\";\nimport \"./css/MainStyle.css\";\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Route exact path=\"/\" component={UserLoginBox} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/talk\" component={Conversation} />\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
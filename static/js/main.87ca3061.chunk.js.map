{"version":3,"sources":["firebase.ts","firebaseData.ts","components/Conversation.tsx","components/therabot.tsx","components/UserLoginBox.tsx","components/Register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Conversation","phase","id","placeholder","defaultValue","type","onClick","document","getElementById","style","display","auth","signOut","console","log","userComment","value","innerHTML","negative","findHighestScore","list","max","Math","indexOf","greet","farewell","interrupted","nullResponse","emotions","userIsAngry","userIsSad","userIsScared","userIsDepressed","statement","toUpperCase","replace","words","split","length","randomRank","floor","random","includes","search","feelingChoice","feelingScores","i","w","e","k","responseScores","u","responseChoice","therabot","$","scrollTop","scrollHeight","val","UserLoginBox","history","useHistory","nextPath","path","push","onAuthStateChanged","firebaseUser","className","getValue","email","pass","signInWithEmailAndPassword","then","result","catch","message","Register","createUserWithEmailAndPassword","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAGAA,IAASC,cCHM,CACXC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,iDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDJJT,QAAf,EEEe,SAASU,IACpB,IAAIC,EAAQ,EAuBZ,OACI,6BACI,wBAAIC,GAAG,WAAP,uBACA,yBAAKA,GAAG,gBACJ,8BACIA,GAAG,iBACHC,YAAY,uBACZC,aAAc,KAElB,yBAAKF,GAAG,iBACR,yBAAKA,GAAG,WACJ,4BAAQA,GAAG,YAAYG,KAAK,SAASC,QAhCrD,WACIC,SAASC,eAAe,gBAAiBC,MAAMC,QAAU,OACzDH,SAASC,eAAe,WAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,WAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,YAAaC,MAAMC,QAAU,QACrDpB,EAASqB,OAAOC,UAChBC,QAAQC,IAAI,aA0BA,kBAGA,4BACIZ,GAAG,kBACHG,KAAK,SACLC,QA7BpB,WACI,IAAMS,EAAeR,SAASC,eAC1B,kBACuBQ,MAC3BT,SAASC,eAAe,gBAAiBS,WACrC,uBAAyBF,EAAc,OAC3Cd,ECxBgB,SAACc,EAAqBd,GAC1C,IAAIiB,EAAW,EAEf,SAASC,EAAiBC,GACtB,IAAMC,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQF,IACxB,MAAO,CAACC,EAAKD,EAAKG,QAAQF,IAG9B,IAAMG,EAAQ,CACV,SACA,MACA,aACA,QACA,mBACA,sBAEEC,EAAW,CACb,YACA,OACA,iBACA,4BACA,gBACA,YACA,UAEEC,EAAc,CAChB,mBACA,kCACA,oBAEEC,EAAe,CACjB,+CACA,yBACA,yBAqDEC,EAAW,CAjDH,CACV,QACA,MACA,SACA,WACA,UACA,UACA,WAEU,CACV,MACA,QACA,QACA,UACA,WACA,YACA,aACA,OACA,UACA,aAEQ,CACR,MACA,OACA,OACA,aACA,cACA,SACA,SACA,YACA,YACA,WAES,CACT,SACA,OACA,UACA,UACA,UACA,aACA,aAEe,CACf,YACA,WACA,cACA,eACA,kBA0BEC,EAAc,CArBU,CAC1B,aACA,UACA,YACA,SACA,eAEwB,CACxB,WACA,WACA,OACA,OACA,UAE4B,CAC5B,SACA,aACA,WACA,QACA,YA2BEC,EAAY,CADS,CAAC,SAAU,aAjBX,CACvB,YACA,cACA,aACA,cACA,WACA,SACA,WACA,eAEsB,CACtB,WACA,OACA,OACA,WACA,WAoBEC,EAAe,CAVY,CAAC,SAAU,WAAY,WAC5B,CACxB,UACA,UACA,WACA,aACA,UACA,SAEuB,CAAC,OAAQ,SAAU,YAgDxCC,EAAkB,CAxCW,CAC/B,OACA,OACA,OACA,OACA,WACA,YACA,QACA,SACA,MACA,SACA,QAEqC,CACrC,SACA,YACA,YACA,QACA,OACA,UACA,MACA,SACA,MACA,SACA,YACA,QACA,YAE6B,CAC7B,QACA,OACA,kBACA,SACA,QACA,UACA,QACA,OACA,SACA,UAQEC,EAAYlB,EACbmB,cACAC,QAAQ,4BAA6B,IACpCC,EAAQH,EAAUI,MAAM,KAE9B,GAAc,IAAVpC,EACAM,SAASC,eAAe,gBAAiBS,WACrC,kEACJhB,EAAQ,OACL,GAAqB,IAAjBmC,EAAME,OAAc,CAC3B,IAAMC,EAAajB,KAAKkB,MAAMlB,KAAKmB,SAAWd,EAAaW,QAC3D/B,SAASC,eAAe,gBAAiBS,WACrC,2BAA6BU,EAAaY,GAAc,YACzD,GAAIH,EAAMM,SAAS,UAAYN,EAAMM,SAAS,MAAO,CACxD,IAAMH,EAAajB,KAAKkB,MAAMlB,KAAKmB,SAAWjB,EAAMc,QACpD/B,SAASC,eAAe,gBAAiBS,WACrC,2BAA6BO,EAAMe,GAAc,YAClD,GACHH,EAAMM,SAAS,YACfN,EAAMM,SAAS,QACfN,EAAMM,SAAS,aACf3B,EAAY4B,OAAO,kBAAoB,EACzC,CACE,GAAa,GAAT1C,EAAY,CACZ,IAAMsC,EAAajB,KAAKkB,MAAMlB,KAAKmB,SAAWf,EAAYY,QAC1D/B,SAASC,eAAe,gBAAiBS,WACrC,2BAA6BS,EAAYa,GAAc,OAC3DtC,EAAQ,MACL,CACH,IAAMsC,EAAajB,KAAKkB,MAAMlB,KAAKmB,SAAWhB,EAASa,QACvD/B,SAASC,eAAe,gBAAiBS,WACrC,2BAA6BQ,EAASc,GAAc,OAE5DtC,EAAQ,OACL,GAAc,IAAVA,EAAa,CAIpB,IAHA,IAAI2C,EAEAC,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,GACxBC,EAAI,EAAGA,EAAIlB,EAASU,OAAQQ,IAEjC,IAAK,IAAIC,KADT7B,EAAW,EACGkB,EAIV,IAAK,IAAIY,IAHQ,QAAbZ,EAAMW,IAA6B,UAAbX,EAAMW,KAC5B7B,GAAY,GAEFU,EACV,IAAK,IAAIqB,KAAKrB,EAASoB,GACfZ,EAAMW,KAAOnB,EAASoB,GAAGC,GAAGf,gBACxBhB,EAAW,GACX2B,EAAcG,KACd9B,KAEA2B,EAAcG,MAQtC,GAAyB,KADzBJ,EAAgBzB,EAAiB0B,IACf,GACdtC,SAASC,eAAe,gBAAiBS,WACrC,sFAEJ,OAAQ2B,EAAc,IAClB,KAAK,EACD3C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,uDACJ,MACJ,KAAK,EACDhB,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,6EACJ,MACJ,KAAK,EACDhB,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,6EACJ,MACJ,KAAK,EACDhB,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,uEACJ,MACJ,KAAK,EACDhB,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,4IAKb,GAAc,IAAVhB,EAEHgC,EAAUU,OAAO,iBAAmB,GACpCV,EAAUU,OAAO,cAAgB,GAEjC1C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,0EAEJhB,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,iEAIP,GAAc,IAAVhB,EACL,GACIgC,EAAUU,OAAO,iBAAmB,GACpCV,EAAUU,OAAO,cAAgB,EAEjC1C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,0EACD,CACH,IAAIiC,EAAiB,CAAC,EAAG,EAAG,GAC5B,IAAK,IAAIC,KAAKtB,EAEV,IAAK,IAAIkB,KADT7B,EAAW,EACGkB,EACV,IAAK,IAAIa,KAAKpB,EAAYsB,GAClBf,EAAMW,KAAOlB,EAAYsB,GAAGF,GAAGf,eAC/BgB,EAAeC,KAK/B,IAAMC,EAAiBjC,EAAiB+B,GACxC,GAA0B,IAAtBE,EAAe,GACf7C,SAASC,eAAe,gBAAiBS,WACrC,+DAEJ,OAAQmC,EAAe,IACnB,KAAK,EACD7C,SAASC,eAAe,gBAAiBS,WACrC,yDACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,uDACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,6DACJhB,EAAQ,QAOvB,GAAc,IAAVA,EACL,GACIgC,EAAUU,OAAO,iBAAmB,GACpCV,EAAUU,OAAO,YAAc,EAE/B1C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,0EACD,CACH,IAAIiC,EAAiB,CAAC,EAAG,EAAG,GAC5B,IAAK,IAAIC,KAAKrB,EAEV,IAAK,IAAIiB,KADT7B,EAAW,EACGkB,EACV,IAAK,IAAIa,KAAKnB,EAAUqB,GAChBf,EAAMW,KAAOjB,EAAUqB,GAAGF,GAAGf,eAC7BgB,EAAeC,KAK/B,IAAMC,EAAiBjC,EAAiB+B,GACxC,GAA0B,IAAtBE,EAAe,GACf7C,SAASC,eAAe,gBAAiBS,WACrC,+DAEJ,OAAQmC,EAAe,IACnB,KAAK,EACD7C,SAASC,eAAe,gBAAiBS,WACrC,+DACJhB,EAAQ,EACR,MACJ,KAAK,EACDA,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,yIACJ,MACJ,KAAK,EACDV,SAASC,eAAe,gBAAiBS,WACrC,uDACJhB,EAAQ,QAOvB,GAAc,IAAVA,EACL,GACIgC,EAAUU,OAAO,iBAAmB,GACpCV,EAAUU,OAAO,eAAiB,EAElC1C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,0EACD,CACH,IAAIiC,EAAiB,CAAC,EAAG,EAAG,GAC5B,IAAK,IAAIC,KAAKpB,EAEV,IAAK,IAAIgB,KADT7B,EAAW,EACGkB,EACV,IAAK,IAAIa,KAAKlB,EAAaoB,GACnBf,EAAMW,KAAOhB,EAAaoB,GAAGF,GAAGf,eAChCgB,EAAeC,KAK/B,IAAMC,EAAiBjC,EAAiB+B,GACxC,GAA0B,IAAtBE,EAAe,GACf7C,SAASC,eAAe,gBAAiBS,WACrC,+DAEJ,OAAQmC,EAAe,IACnB,KAAK,EACD7C,SAASC,eAAe,gBAAiBS,WACrC,8DACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,sDACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,yDACJhB,EAAQ,QAMrB,GAAc,IAAVA,EACP,GACIgC,EAAUU,OAAO,iBAAmB,GACpCV,EAAUU,OAAO,kBAAoB,EAErC1C,EAAQ,EACRM,SAASC,eAAe,gBAAiBS,WACrC,0EACD,CACH,IAAIiC,EAAiB,CAAC,EAAG,EAAG,GAC5B,IAAK,IAAIC,KAAKnB,EAEV,IAAK,IAAIe,KADT7B,EAAW,EACGkB,EACV,IAAK,IAAIa,KAAKjB,EAAgBmB,GACtBf,EAAMW,KAAOf,EAAgBmB,GAAGF,GAAGf,eACnCgB,EAAeC,KAK/B,IAAMC,EAAiBjC,EAAiB+B,GACxC,GAA0B,IAAtBE,EAAe,GACf7C,SAASC,eAAe,gBAAiBS,WACrC,8DAEJ,OAAQmC,EAAe,IACnB,KAAK,EACD7C,SAASC,eAAe,gBAAiBS,WACrC,iJACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,wGACJhB,EAAQ,EACR,MACJ,KAAK,EACDM,SAASC,eAAe,gBAAiBS,WACrC,uMACJhB,EAAQ,GAM5B,OAAOA,EDtdKoD,CAAStC,EAAad,GAE9BqD,IAAE,iBAAiBC,UAAUD,IAAE,iBAAiB,GAAGE,cACnDF,IAAE,mBAAmBG,IAAI,MAiBb,YASR,yBAAKvD,GAAG,WAAWO,MAAO,CAAEC,QAAS,SACjC,8D,MEjDD,SAASgD,IACpB,IAAIC,EAAUC,cACd,SAASC,EAASC,GACdH,EAAQI,KAAKD,GA6CjB,OA1CAxE,EAASqB,OAAOqD,oBAAmB,SAAAC,GAC3BA,EACApD,QAAQC,IAAImD,GAIZpD,QAAQC,IAAI,kCAqChB,6BACI,mDACA,yBAAKZ,GAAG,WACJ,yBAAKA,GAAG,iBACJ,yBAAKA,GAAG,eAAR,eAEJ,2BACIG,KAAK,OACLH,GAAG,QACHC,YAAY,wBAEhB,2BAAOE,KAAK,OAAOH,GAAG,WAAWC,YAAY,mBAC7C,yBAAKD,GAAG,oBACJ,4BACIgE,UAAU,iBACV7D,KAAK,SACLC,QAAS,kBAAMuD,EAAS,eAH5B,0BAOA,4BACIK,UAAU,eACV7D,KAAK,SACLC,QAxDpB,WACI,IAAM6D,EAAW,SAACjE,GAAD,OACZK,SAASC,eAAeN,GAA0Bc,OACjDoD,EAAQD,EAAS,SACjBE,EAAOF,EAAS,YAER,KAAVC,GAAyB,KAATC,GAChB9D,SAASC,eAAe,oBAAqBS,UACzC,8DACJV,SAASC,eAAe,oBAAqBC,MAAMC,QAC/C,SAGYpB,EACXqB,OACA2D,2BAA2BF,EAAOC,GAGlCE,MAAK,SAAAC,GACFjE,SAASC,eAAe,oBAAqBC,MAAMC,QAC/C,OACJmD,EAAS,YAEZY,OAAM,SAAAzB,GACHzC,SAASC,eAAe,oBAAqBS,UACzC+B,EAAE0B,QACNnE,SAASC,eAAe,oBAAqBC,MAAMC,QAC/C,aA0BJ,YAQJ,yBAAKR,GAAG,mBAAmBO,MAAO,CAAEC,QAAS,Y,MC7E9C,SAASiE,IACpB,IAAIhB,EAAUC,cAyCd,OACI,6BACI,mDACA,yBAAK1D,GAAG,WACJ,yBAAKA,GAAG,iBACJ,yBAAKA,GAAG,eAAR,aAEJ,2BACIG,KAAK,OACLH,GAAG,QACHC,YAAY,2BAEhB,2BACIE,KAAK,OACLH,GAAG,WACHC,YAAY,qBAEhB,yBAAKD,GAAG,iBACJ,4BACIA,GAAG,aACHG,KAAK,SACLC,QAzDpB,WACI,IAAM6D,EAAW,SAACjE,GAAD,OACZK,SAASC,eAAeN,GAA0Bc,OAEjDoD,EAAQD,EAAS,SACjBE,EAAOF,EAAS,YAER,KAAVC,GAAyB,KAATC,GAChB9D,SAASC,eAAe,WAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,cAAeS,UACnC,+EACJV,SAASC,eAAe,cAAeC,MAAMC,QAAU,SAG1CpB,EAASqB,OACDiE,+BAA+BR,EAAOC,GAEtDE,MAAK,SAAAC,GACFjE,SAASC,eAAe,WAAYC,MAAMC,QAAU,QACpDH,SAASC,eAAe,eAAgBC,MAAMC,QAC1C,QACJH,SAASC,eAAe,cAAeC,MAAMC,QACzC,OACJH,SAASC,eAAe,cAAeC,MAAMC,QACzC,UAEP+D,OAAM,SAAAzB,GACHzC,SAASC,eAAe,WAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,cAAeS,UACnC+B,EAAE0B,QACNnE,SAASC,eAAe,cAAeC,MAAMC,QACzC,aAuBJ,SAQJ,yBAAKR,GAAG,UAAUO,MAAO,CAAEC,QAAS,SAApC,oDAGA,yBAAKR,GAAG,aAAaO,MAAO,CAAEC,QAAS,UACvC,4BACIR,GAAG,cACHG,KAAK,SACLC,QAAS,kBAzEPwD,EAyEsB,SAxEpCH,EAAQI,KAAKD,GADjB,IAAkBA,GA0EFrD,MAAO,CAAEC,QAAS,SAJtB,W,UC5DDmE,EAVH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAAChB,KAAK,IAAIiB,UAAWrB,IACjC,kBAAC,IAAD,CAAOI,KAAK,YAAYiB,UAAWJ,IACnC,kBAAC,IAAD,CAAOb,KAAK,QAAQiB,UAAW/E,MCAvBgF,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCbZC,IAASC,OAAO,kBAAC,EAAD,MAAS/E,SAASC,eAAe,SDoIzC,kBAAmB+E,WACnBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GAC/BA,EAAaC,kB","file":"static/js/main.87ca3061.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport firebaseConfig from \"./firebaseData\";\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\n","export default {\n    apiKey: \"AIzaSyD_GOu9Qy1FFP0eKKZOE6t4lzAegqHwvvw\",\n    authDomain: \"cs-4800-backend-server.firebaseapp.com\",\n    databaseURL: \"https://cs-4800-backend-server.firebaseio.com/\",\n    projectId: \"cs-4800-backend-server\",\n    storageBucket: \"cs-4800-backend-server.appspot.com\",\n    messagingSenderId: \"767965540098\",\n    appId: \"1:767965540098:web:77527f43aec0d7d07a9c1b\",\n    measurementId: \"G-GKYHGS54QX\"\n};\n","import React from \"react\";\nimport \"../css/ConversationStyle.css\";\nimport $ from \"jquery\";\nimport { therabot } from \"./therabot\";\nimport firebase from \"../firebase\";\n\nexport default function Conversation() {\n    let phase = 1;\n\n    function thankUser() {\n        document.getElementById(\"ContainerBox\")!.style.display = \"none\";\n        document.getElementById(\"Buttons\")!.style.display = \"none\";\n        document.getElementById(\"Welcome\")!.style.display = \"none\";\n        document.getElementById(\"thankyou\")!.style.display = \"block\";\n        firebase.auth().signOut();\n        console.log(\"signout\");\n    }\n\n    function appendUserConvo() {\n        const userComment = (document.getElementById(\n            \"ConvoUserInput\"\n        )! as HTMLTextAreaElement).value;\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='UserComment'>\" + userComment + \"</p>\";\n        phase = therabot(userComment, phase);\n\n        $(\"#ConvoHistory\").scrollTop($(\"#ConvoHistory\")[0].scrollHeight);\n        $(\"#ConvoUserInput\").val(\"\");\n    }\n\n    return (\n        <div>\n            <h1 id=\"Welcome\">Welcome to Therabot</h1>\n            <div id=\"ContainerBox\">\n                <textarea\n                    id=\"ConvoUserInput\"\n                    placeholder=\"What's on your mind?\"\n                    defaultValue={\"\"}\n                />\n                <div id=\"ConvoHistory\" />\n                <div id=\"Buttons\">\n                    <button id=\"LeaveRoom\" type=\"button\" onClick={thankUser}>\n                        Leave Chatroom\n                    </button>\n                    <button\n                        id=\"UserSubmitConvo\"\n                        type=\"button\"\n                        onClick={appendUserConvo}\n                    >\n                        Submit\n                    </button>\n                </div>\n            </div>\n            <div id=\"thankyou\" style={{ display: \"none\" }}>\n                <p>Thank you for using Therabot!</p>\n            </div>\n        </div>\n    );\n}\n","export const therabot = (userComment: string, phase: number) => {\n    let negative = 0;\n\n    function findHighestScore(list: number[]): [number, number] {\n        const max = Math.max(...list);\n        return [max, list.indexOf(max)];\n    }\n\n    const greet = [\n        \"Hello!\",\n        \"Hi!\",\n        \"Greetings!\",\n        \"Hola!\",\n        \"Good day to you!\",\n        \" Hey, how are you?\"\n    ];\n    const farewell = [\n        \"Good Bye!\",\n        \"Bye!\",\n        \"See you later!\",\n        \"Lets talk again sometime!\",\n        \"See you soon!\",\n        \"Farewell!\",\n        \"Adios!\"\n    ];\n    const interrupted = [\n        \"Leaving so soon?\",\n        \"Awe, we were getting somewhere.\",\n        \"Already leaving?\"\n    ];\n    const nullResponse = [\n        \"I didn't catch that. Can you say that again?\",\n        \"Did you say something?\",\n        \"Hello? Are you there?\"\n    ];\n\n    //All emotions and their keywords\n    const happy = [\n        \"happy\",\n        \"joy\",\n        \"joyful\",\n        \"cheerful\",\n        \"chipper\",\n        \"excited\",\n        \"relaxed\"\n    ];\n    const angry = [\n        \"mad\",\n        \"anger\",\n        \"angry\",\n        \"furious\",\n        \"agitated\",\n        \"resentful\",\n        \"infuriated\",\n        \"rage\",\n        \"enraged\",\n        \"indignant\"\n    ];\n    const sad = [\n        \"sad\",\n        \"blue\",\n        \"down\",\n        \"despondent\",\n        \"discouraged\",\n        \"gloomy\",\n        \"sorrow\",\n        \"sorrowful\",\n        \"miserable\",\n        \"unhappy\"\n    ];\n    const fear = [\n        \"scared\",\n        \"fear\",\n        \"fearful\",\n        \"anxious\",\n        \"nervous\",\n        \"frightened\",\n        \"terrified\"\n    ];\n    const depression = [\n        \"depressed\",\n        \"downcast\",\n        \"unmotivated\",\n        \"uninterested\",\n        \"disinterested\"\n    ];\n    const emotions = [happy, angry, sad, fear, depression];\n\n    //Reasons for Anger\n    const angryUserIsFrustrated = [\n        \"frustrated\",\n        \"annoyed\",\n        \"irritated\",\n        \"jilted\",\n        \"unsatisfied\"\n    ];\n    const angryUserIsGrieving = [\n        \"grieving\",\n        \"mourning\",\n        \"lost\",\n        \"loss\",\n        \"lament\"\n    ];\n    const angryUserHasAngerIssues = [\n        \"always\",\n        \"constantly\",\n        \"constant\",\n        \"often\",\n        \"usually\"\n    ];\n    const userIsAngry = [\n        angryUserIsFrustrated,\n        angryUserIsGrieving,\n        angryUserHasAngerIssues\n    ];\n\n    //Reasons for Sadness\n    const sadUserIsDepressed = [\n        \"depressed\",\n        \"unmotivated\",\n        \"despondent\",\n        \"discouraged\",\n        \"downcast\",\n        \"gloomy\",\n        \"dejected\",\n        \"crestfallen\"\n    ];\n    const sadUserIsGrieving = [\n        \"grieving\",\n        \"loss\",\n        \"lost\",\n        \"mourning\",\n        \"lament\"\n    ];\n    const sadUserHasNoReason = [\"unsure\", \"uncertain\"];\n    const userIsSad = [\n        sadUserHasNoReason,\n        sadUserIsDepressed,\n        sadUserIsGrieving\n    ];\n\n    //Reasons for Fear\n    const scaredUserHasPanicAttack = [\"sudden\", \"suddenly\", \"nowhere\"];\n    const scaredUserIsAnxious = [\n        \"anxious\",\n        \"nervous\",\n        \"restless\",\n        \"distressed\",\n        \"worried\",\n        \"dread\"\n    ];\n    const scaredUserIsPhobic = [\"hate\", \"scared\", \"dislike\"];\n    const userIsScared = [\n        scaredUserHasPanicAttack,\n        scaredUserIsAnxious,\n        scaredUserIsPhobic\n    ];\n\n    //Reasons for Depression\n    const depressedUserHasPastTrauma = [\n        \"loss\",\n        \"rape\",\n        \"ptsd\",\n        \"hurt\",\n        \"attacked\",\n        \"assaulted\",\n        \"abuse\",\n        \"abused\",\n        \"hit\",\n        \"beaten\",\n        \"beat\"\n    ];\n    const depressedUserInheritedDepression = [\n        \"family\",\n        \"ancestors\",\n        \"relatives\",\n        \"uncle\",\n        \"aunt\",\n        \"parents\",\n        \"dad\",\n        \"father\",\n        \"mom\",\n        \"mother\",\n        \"inherited\",\n        \"genes\",\n        \"genetics\"\n    ];\n    const depressedUserAbusesDrugs = [\n        \"drugs\",\n        \"meth\",\n        \"methamphetamine\",\n        \"cocain\",\n        \"crack\",\n        \"tobacco\",\n        \"smoke\",\n        \"weed\",\n        \"inject\",\n        \"snort\"\n    ];\n    const userIsDepressed = [\n        depressedUserHasPastTrauma,\n        depressedUserInheritedDepression,\n        depressedUserAbusesDrugs\n    ];\n\n    const statement = userComment\n        .toUpperCase()\n        .replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\");\n    const words = statement.split(\" \");\n\n    if (phase === 0) {\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='TherabotComment'>Oh, you have something else to say?</p>\";\n        phase = 1;\n    } else if (words.length === 0) {\n        const randomRank = Math.floor(Math.random() * nullResponse.length);\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='TherabotComment'>\" + nullResponse[randomRank] + \"</p>\";\n    } else if (words.includes(\"HELLO\") || words.includes(\"HI\")) {\n        const randomRank = Math.floor(Math.random() * greet.length);\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n            \"<p id='TherabotComment'>\" + greet[randomRank] + \"</p>\";\n    } else if (\n        words.includes(\"GOODBYE\") ||\n        words.includes(\"BYE\") ||\n        words.includes(\"FAREWELL\") ||\n        userComment.search(\"See you later\") > -1\n    ) {\n        if (phase != 1) {\n            const randomRank = Math.floor(Math.random() * interrupted.length);\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>\" + interrupted[randomRank] + \"</p>\";\n            phase = 0;\n        } else {\n            const randomRank = Math.floor(Math.random() * farewell.length);\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>\" + farewell[randomRank] + \"</p>\";\n        }\n        phase = 0;\n    } else if (phase === 1) {\n        let feelingChoice;\n\n        let feelingScores = [0, 0, 0, 0, 0];\n        for (let i = 0; i < emotions.length; i++) {\n            negative = 0;\n            for (let w in words) {\n                if (words[w] === \"NOT\" || words[w] === \"DON'T\") {\n                    negative += 1;\n                }\n                for (let e in emotions) {\n                    for (let k in emotions[e]) {\n                        if (words[w] === emotions[e][k].toUpperCase()) {\n                            if (negative > 0) {\n                                feelingScores[e]--;\n                                negative--;\n                            } else {\n                                feelingScores[e]++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        feelingChoice = findHighestScore(feelingScores);\n        if (feelingChoice[0] === 0) {\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>I'm not sure what you mean. Can you rephrase that?</p>\";\n        } else\n            switch (feelingChoice[1]) {\n                case 0:\n                    phase = 2;\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                        \"<p id='TherabotComment'>Describe your happiness.</p>\";\n                    break;\n                case 1:\n                    phase = 3;\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                        \"<p id='TherabotComment'>Describe your anger. What is making you angry?</p>\";\n                    break;\n                case 2:\n                    phase = 4;\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                        \"<p id='TherabotComment'>Describe your sadness. What is making you sad?</p>\";\n                    break;\n                case 3:\n                    phase = 5;\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                        \"<p id='TherabotComment'>Describe your fear. What is scaring you?</p>\";\n                    break;\n                case 4:\n                    phase = 6;\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                        \"<p id='TherabotComment'>Depression is serious, but can be fixed. Can you describe the circustances surrounding your depression?</p>\";\n                    break;\n            }\n\n        //Why is user happy?\n    } else if (phase === 2) {\n        if (\n            statement.search(\"JUST KIDDING\") > -1 ||\n            statement.search(\"NOT HAPPY\") > -1\n        ) {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>That's too bad. How do you actually feel?</p>\";\n        } else {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>I am glad you feel this way!</p>\";\n        }\n    }\n    //Why is user angry?\n    else if (phase === 3) {\n        if (\n            statement.search(\"JUST KIDDING\") > -1 ||\n            statement.search(\"NOT ANGRY\") > -1\n        ) {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\n        } else {\n            let responseScores = [0, 0, 0];\n            for (let u in userIsAngry) {\n                negative = 0;\n                for (let w in words) {\n                    for (let k in userIsAngry[u]) {\n                        if (words[w] === userIsAngry[u][k].toUpperCase()) {\n                            responseScores[u]++;\n                        }\n                    }\n                }\n            }\n            const responseChoice = findHighestScore(responseScores);\n            if (responseChoice[0] === 0) {\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\n            } else {\n                switch (responseChoice[1]) {\n                    case 0:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to be frustrated.</p>\";\n                        phase = 0;\n                        break;\n                    case 1:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to be grieving.</p>\";\n                        phase = 0;\n                        break;\n                    case 2:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to have anger issues.</p>\";\n                        phase = 0;\n                        break;\n                }\n            }\n        }\n    }\n    //Why is user sad?\n    else if (phase === 4) {\n        if (\n            statement.search(\"JUST KIDDING\") > -1 ||\n            statement.search(\"NOT SAD\") > -1\n        ) {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\n        } else {\n            let responseScores = [0, 0, 0];\n            for (let u in userIsSad) {\n                negative = 0;\n                for (let w in words) {\n                    for (let k in userIsSad[u]) {\n                        if (words[w] === userIsSad[u][k].toUpperCase()) {\n                            responseScores[u]++;\n                        }\n                    }\n                }\n            }\n            const responseChoice = findHighestScore(responseScores);\n            if (responseChoice[0] === 0) {\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\n            } else {\n                switch (responseChoice[1]) {\n                    case 0:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to have medical issues.</p>\";\n                        phase = 0;\n                        break;\n                    case 1:\n                        phase = 6;\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>Your sadness might actually be depression. Can you describe the circumstances surrounding your depression?</p>\";\n                        break;\n                    case 2:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to be grieving.</p>\";\n                        phase = 0;\n                        break;\n                }\n            }\n        }\n    }\n    //Why is user scared?\n    else if (phase === 5) {\n        if (\n            statement.search(\"JUST KIDDING\") > -1 ||\n            statement.search(\"NOT SCARED\") > -1\n        ) {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\n        } else {\n            let responseScores = [0, 0, 0];\n            for (let u in userIsScared) {\n                negative = 0;\n                for (let w in words) {\n                    for (let k in userIsScared[u]) {\n                        if (words[w] === userIsScared[u][k].toUpperCase()) {\n                            responseScores[u]++;\n                        }\n                    }\n                }\n            }\n            const responseChoice = findHighestScore(responseScores);\n            if (responseChoice[0] === 0) {\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\n            } else {\n                switch (responseChoice[1]) {\n                    case 0:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to have panic attacks.</p>\";\n                        phase = 0;\n                        break;\n                    case 1:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to be anxious.</p>\";\n                        phase = 0;\n                        break;\n                    case 2:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You seem to have a phobia.</p>\";\n                        phase = 0;\n                        break;\n                }\n            }\n        }\n        //Why is user depressed?\n    } else if (phase === 6) {\n        if (\n            statement.search(\"JUST KIDDING\") > -1 ||\n            statement.search(\"NOT DEPRESSED\") > -1\n        ) {\n            phase = 1;\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\n        } else {\n            let responseScores = [0, 0, 0];\n            for (let u in userIsDepressed) {\n                negative = 0;\n                for (let w in words) {\n                    for (let k in userIsDepressed[u]) {\n                        if (words[w] === userIsDepressed[u][k].toUpperCase()) {\n                            responseScores[u]++;\n                        }\n                    }\n                }\n            }\n            const responseChoice = findHighestScore(responseScores);\n            if (responseChoice[0] === 0) {\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                    \"<p id='TherabotComment'>I'm not sure what you mean</p>\";\n            } else {\n                switch (responseChoice[1]) {\n                    case 0:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>You might have some unresolved past trauma. It might be beneficial to discuss these with a therapist or loved one.</p>\";\n                        phase = 0;\n                        break;\n                    case 1:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>Depression may run in your family. It might be best to seek medical help.</p>\";\n                        phase = 0;\n                        break;\n                    case 2:\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\n                            \"<p id='TherabotComment'>Your depression may be linked to your drug use. Thirty-percent of drug users experience depression. It might be best to stop use until you recover from your depression.</p>\";\n                        phase = 0;\n                        break;\n                }\n            }\n        }\n    }\n    return phase;\n};\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/IndexStyle.css\";\nimport firebase from \"../firebase\";\n\nexport default function UserLoginBox() {\n    let history = useHistory();\n    function nextPath(path: any) {\n        history.push(path);\n    }\n\n    firebase.auth().onAuthStateChanged(firebaseUser => {\n        if (firebaseUser) {\n            console.log(firebaseUser);\n            // TODO: method to not allow random ppl to type to bot\n            // without signing in first\n        } else {\n            console.log(\"No user signed in currently\");\n        }\n    });\n\n    function CheckSignIn() {\n        const getValue = (id: string) =>\n            (document.getElementById(id)! as HTMLInputElement).value;\n        const email = getValue(\"email\");\n        const pass = getValue(\"password\");\n\n        if (email === \"\" || pass === \"\") {\n            document.getElementById(\"SignInNotSuccess\")!.innerHTML =\n                \"Cannot sign in. Please make sure all fields are filled out.\";\n            document.getElementById(\"SignInNotSuccess\")!.style.display =\n                \"block\";\n        } else {\n            // Sign In\n            const promise = firebase\n                .auth()\n                .signInWithEmailAndPassword(email, pass);\n\n            promise\n                .then(result => {\n                    document.getElementById(\"SignInNotSuccess\")!.style.display =\n                        \"none\";\n                    nextPath(\"/talk\");\n                })\n                .catch(e => {\n                    document.getElementById(\"SignInNotSuccess\")!.innerHTML =\n                        e.message;\n                    document.getElementById(\"SignInNotSuccess\")!.style.display =\n                        \"block\";\n                });\n        }\n    }\n\n    return (\n        <div>\n            <h1>Welcome to Therabot</h1>\n            <div id=\"MainBox\">\n                <div id=\"MainBoxBanner\">\n                    <div id=\"MainTextBox\">User Login</div>\n                </div>\n                <input\n                    type=\"text\"\n                    id=\"email\"\n                    placeholder=\"Enter Email Address\"\n                />\n                <input type=\"text\" id=\"password\" placeholder=\"Enter Password\" />\n                <div id=\"UserLoginButtons\">\n                    <button\n                        className=\"RegisterButton\"\n                        type=\"button\"\n                        onClick={() => nextPath(\"/register\")}\n                    >\n                        Click here to register\n                    </button>\n                    <button\n                        className=\"SignInButton\"\n                        type=\"submit\"\n                        onClick={CheckSignIn}\n                    >\n                        Sign in\n                    </button>\n                </div>\n                <div id=\"SignInNotSuccess\" style={{ display: \"none\" }}></div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/RegisterPageStyle.css\";\nimport firebase from \"../firebase\";\n\nexport default function Register() {\n    let history = useHistory();\n    function nextPath(path: any) {\n        history.push(path);\n    }\n\n    function checkSuccessReg() {\n        const getValue = (id: string) =>\n            (document.getElementById(id)! as HTMLInputElement).value;\n\n        const email = getValue(\"Email\");\n        const pass = getValue(\"Password\");\n\n        if (email === \"\" || pass === \"\") {\n            document.getElementById(\"success\")!.style.display = \"none\";\n            document.getElementById(\"notsuccess\")!.innerHTML =\n                \"Registration was not successful. Please make sure all fields are filled out.\";\n            document.getElementById(\"notsuccess\")!.style.display = \"block\";\n        } else {\n            // Create user\n            const auth = firebase.auth();\n            const promise = auth.createUserWithEmailAndPassword(email, pass);\n            promise\n                .then(result => {\n                    document.getElementById(\"success\")!.style.display = \"block\";\n                    document.getElementById(\"BackToLogin\")!.style.display =\n                        \"block\";\n                    document.getElementById(\"notsuccess\")!.style.display =\n                        \"none\";\n                    document.getElementById(\"DoneButton\")!.style.display =\n                        \"none\";\n                })\n                .catch(e => {\n                    document.getElementById(\"success\")!.style.display = \"none\";\n                    document.getElementById(\"notsuccess\")!.innerHTML =\n                        e.message;\n                    document.getElementById(\"notsuccess\")!.style.display =\n                        \"block\";\n                });\n        }\n    }\n\n    return (\n        <div>\n            <h1>Welcome to Therabot</h1>\n            <div id=\"MainBox\">\n                <div id=\"MainBoxBanner\">\n                    <div id=\"MainTextBox\">Register</div>\n                </div>\n                <input\n                    type=\"text\"\n                    id=\"Email\"\n                    placeholder=\"Enter an email address\"\n                />\n                <input\n                    type=\"text\"\n                    id=\"Password\"\n                    placeholder=\"Enter a password\"\n                />\n                <div id=\"buttonElement\">\n                    <button\n                        id=\"DoneButton\"\n                        type=\"button\"\n                        onClick={checkSuccessReg}\n                    >\n                        Done\n                    </button>\n                </div>\n                <div id=\"success\" style={{ display: \"none\" }}>\n                    Success! You are now registered to use Therabot!\n                </div>\n                <div id=\"notsuccess\" style={{ display: \"none\" }}></div>\n                <button\n                    id=\"BackToLogin\"\n                    type=\"button\"\n                    onClick={() => nextPath(\"/\")}\n                    style={{ display: \"none\" }}\n                >\n                    Login\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport Conversation from \"./components/Conversation\";\nimport UserLoginBox from \"./components/UserLoginBox\";\nimport Register from \"./components/Register\";\nimport \"./css/MainStyle.css\";\n\nconst App = () => {\n    return (\n        <HashRouter>\n            <Route exact path=\"/\" component={UserLoginBox} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/talk\" component={Conversation} />\n        </HashRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["firebase.ts","firebaseData.ts","components/Conversation.tsx","components/therabot.tsx","components/UserLoginBox.tsx","components/Register.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Conversation","phase","id","placeholder","defaultValue","type","onClick","document","getElementById","style","display","auth","signOut","console","log","userComment","value","innerHTML","negative","findHighestScore","list","max","Math","indexOf","greet","farewell","interrupted","nullResponse","emotions","userIsAngry","userIsSad","userIsScared","userIsDepressed","statement","toUpperCase","replace","words","split","length","randomRank","floor","random","includes","search","feelingChoice","feelingScores","i","w","e","k","responseScores","u","responseChoice","therabot","$","scrollTop","scrollHeight","val","UserLoginBox","history","useHistory","nextPath","path","push","onAuthStateChanged","firebaseUser","className","getValue","email","pass","signInWithEmailAndPassword","then","result","catch","message","Register","createUserWithEmailAndPassword","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2201831.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport firebaseConfig from \"./firebaseData\";\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\n","export default {\n    apiKey: \"AIzaSyD_GOu9Qy1FFP0eKKZOE6t4lzAegqHwvvw\",\n    authDomain: \"cs-4800-backend-server.firebaseapp.com\",\n    databaseURL: \"https://cs-4800-backend-server.firebaseio.com/\",\n    projectId: \"cs-4800-backend-server\",\n    storageBucket: \"cs-4800-backend-server.appspot.com\",\n    messagingSenderId: \"767965540098\",\n    appId: \"1:767965540098:web:77527f43aec0d7d07a9c1b\",\n    measurementId: \"G-GKYHGS54QX\"\n};\n","import React from \"react\";\r\nimport \"../css/ConversationStyle.css\";\r\nimport $ from \"jquery\";\r\nimport { therabot } from \"./therabot\";\r\nimport firebase from \"../firebase\";\r\n\r\nexport default function Conversation() {\r\n    let phase = 1;\r\n\r\n    function thankUser() {\r\n        document.getElementById(\"ContainerBox\")!.style.display = \"none\";\r\n        document.getElementById(\"Buttons\")!.style.display = \"none\";\r\n        document.getElementById(\"Welcome\")!.style.display = \"none\";\r\n        document.getElementById(\"thankyou\")!.style.display = \"block\";\r\n        firebase.auth().signOut();\r\n        console.log(\"signout\");\r\n    }\r\n\r\n    function appendUserConvo() {\r\n        const userComment = (document.getElementById(\r\n            \"ConvoUserInput\"\r\n        )! as HTMLTextAreaElement).value;\r\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n            \"<p id='UserComment'>\" + userComment + \"</p>\";\r\n        phase = therabot(userComment, phase);\r\n\r\n        $(\"#ConvoHistory\").scrollTop($(\"#ConvoHistory\")[0].scrollHeight);\r\n        $(\"#ConvoUserInput\").val(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 id=\"Welcome\">Welcome to Therabot</h1>\r\n            <div id=\"ContainerBox\">\r\n                <textarea\r\n                    id=\"ConvoUserInput\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    defaultValue={\"\"}\r\n                />\r\n                <div id=\"ConvoHistory\" />\r\n                <div id=\"Buttons\">\r\n                    <button id=\"LeaveRoom\" type=\"button\" onClick={thankUser}>\r\n                        Leave Chatroom\r\n                    </button>\r\n                    <button\r\n                        id=\"UserSubmitConvo\"\r\n                        type=\"button\"\r\n                        onClick={appendUserConvo}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div id=\"thankyou\" style={{ display: \"none\" }}>\r\n                <p>Thank you for using Therabot!</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export const therabot = (userComment: string, phase: number) => {\r\n    let negative = 0;\r\n\r\n    function findHighestScore(list: number[]): [number, number] {\r\n        const max = Math.max(...list);\r\n        return [max, list.indexOf(max)];\r\n    }\r\n\r\n    const greet = [\r\n        \"Hello!\",\r\n        \"Hi!\",\r\n        \"Greetings!\",\r\n        \"Hola!\",\r\n        \"Good day to you!\",\r\n        \" Hey, how are you?\"\r\n    ];\r\n    const farewell = [\r\n        \"Good Bye!\",\r\n        \"Bye!\",\r\n        \"See you later!\",\r\n        \"Lets talk again sometime!\",\r\n        \"See you soon!\",\r\n        \"Farewell!\",\r\n        \"Adios!\"\r\n    ];\r\n    const interrupted = [\r\n        \"Leaving so soon?\",\r\n        \"Awe, we were getting somewhere.\",\r\n        \"Already leaving?\"\r\n    ];\r\n    const nullResponse = [\r\n        \"I didn't catch that. Can you say that again?\",\r\n        \"Did you say something?\",\r\n        \"Hello? Are you there?\"\r\n    ];\r\n\r\n    //All emotions and their keywords\r\n    const happy = [\r\n        \"happy\",\r\n        \"joy\",\r\n        \"joyful\",\r\n        \"cheerful\",\r\n        \"chipper\",\r\n        \"excited\",\r\n        \"relaxed\"\r\n    ];\r\n    const angry = [\r\n        \"mad\",\r\n        \"anger\",\r\n        \"angry\",\r\n        \"furious\",\r\n        \"agitated\",\r\n        \"resentful\",\r\n        \"infuriated\",\r\n        \"rage\",\r\n        \"enraged\",\r\n        \"indignant\"\r\n    ];\r\n    const sad = [\r\n        \"sad\",\r\n        \"blue\",\r\n        \"down\",\r\n        \"despondent\",\r\n        \"discouraged\",\r\n        \"gloomy\",\r\n        \"sorrow\",\r\n        \"sorrowful\",\r\n        \"miserable\",\r\n        \"unhappy\"\r\n    ];\r\n    const fear = [\r\n        \"scared\",\r\n        \"fear\",\r\n        \"fearful\",\r\n        \"anxious\",\r\n        \"nervous\",\r\n        \"frightened\",\r\n        \"terrified\"\r\n    ];\r\n    const depression = [\r\n        \"depressed\",\r\n        \"downcast\",\r\n        \"unmotivated\",\r\n        \"uninterested\",\r\n        \"disinterested\"\r\n    ];\r\n    const emotions = [happy, angry, sad, fear, depression];\r\n\r\n    //Reasons for Anger\r\n    const angryUserIsFrustrated = [\r\n        \"frustrated\",\r\n        \"annoyed\",\r\n        \"irritated\",\r\n        \"jilted\",\r\n        \"unsatisfied\"\r\n    ];\r\n    const angryUserIsGrieving = [\r\n        \"grieving\",\r\n        \"mourning\",\r\n        \"lost\",\r\n        \"loss\",\r\n        \"lament\"\r\n    ];\r\n    const angryUserHasAngerIssues = [\r\n        \"always\",\r\n        \"constantly\",\r\n        \"constant\",\r\n        \"often\",\r\n        \"usually\"\r\n    ];\r\n    const userIsAngry = [\r\n        angryUserIsFrustrated,\r\n        angryUserIsGrieving,\r\n        angryUserHasAngerIssues\r\n    ];\r\n\r\n    //Reasons for Sadness\r\n    const sadUserIsDepressed = [\r\n        \"depressed\",\r\n        \"unmotivated\",\r\n        \"despondent\",\r\n        \"discouraged\",\r\n        \"downcast\",\r\n        \"gloomy\",\r\n        \"dejected\",\r\n        \"crestfallen\"\r\n    ];\r\n    const sadUserIsGrieving = [\r\n        \"grieving\",\r\n        \"loss\",\r\n        \"lost\",\r\n        \"mourning\",\r\n        \"lament\"\r\n    ];\r\n    const sadUserHasNoReason = [\"unsure\", \"uncertain\"];\r\n    const userIsSad = [\r\n        sadUserHasNoReason,\r\n        sadUserIsDepressed,\r\n        sadUserIsGrieving\r\n    ];\r\n\r\n    //Reasons for Fear\r\n    const scaredUserHasPanicAttack = [\"sudden\", \"suddenly\", \"nowhere\"];\r\n    const scaredUserIsAnxious = [\r\n        \"anxious\",\r\n        \"nervous\",\r\n        \"restless\",\r\n        \"distressed\",\r\n        \"worried\",\r\n        \"dread\"\r\n    ];\r\n    const scaredUserIsPhobic = [\"hate\", \"scared\", \"dislike\"];\r\n    const userIsScared = [\r\n        scaredUserHasPanicAttack,\r\n        scaredUserIsAnxious,\r\n        scaredUserIsPhobic\r\n    ];\r\n\r\n    //Reasons for Depression\r\n    const depressedUserHasPastTrauma = [\r\n        \"loss\",\r\n        \"rape\",\r\n        \"ptsd\",\r\n        \"hurt\",\r\n        \"attacked\",\r\n        \"assaulted\",\r\n        \"abuse\",\r\n        \"abused\",\r\n        \"hit\",\r\n        \"beaten\",\r\n        \"beat\"\r\n    ];\r\n    const depressedUserInheritedDepression = [\r\n        \"family\",\r\n        \"ancestors\",\r\n        \"relatives\",\r\n        \"uncle\",\r\n        \"aunt\",\r\n        \"parents\",\r\n        \"dad\",\r\n        \"father\",\r\n        \"mom\",\r\n        \"mother\",\r\n        \"inherited\",\r\n        \"genes\",\r\n        \"genetics\"\r\n    ];\r\n    const depressedUserAbusesDrugs = [\r\n        \"drugs\",\r\n        \"meth\",\r\n        \"methamphetamine\",\r\n        \"cocain\",\r\n        \"crack\",\r\n        \"tobacco\",\r\n        \"smoke\",\r\n        \"weed\",\r\n        \"inject\",\r\n        \"snort\"\r\n    ];\r\n    const userIsDepressed = [\r\n        depressedUserHasPastTrauma,\r\n        depressedUserInheritedDepression,\r\n        depressedUserAbusesDrugs\r\n    ];\r\n\r\n    const statement = userComment\r\n        .toUpperCase()\r\n        .replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\");\r\n    const words = statement.split(\" \");\r\n\r\n    if (phase === 0) {\r\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n            \"<p id='TherabotComment'>Oh, you have something else to say?</p>\";\r\n        phase = 1;\r\n    } else if (words.length === 0) {\r\n        const randomRank = Math.floor(Math.random() * nullResponse.length);\r\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n            \"<p id='TherabotComment'>\" + nullResponse[randomRank] + \"</p>\";\r\n    } else if (words.includes(\"HELLO\") || words.includes(\"HI\")) {\r\n        const randomRank = Math.floor(Math.random() * greet.length);\r\n        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n            \"<p id='TherabotComment'>\" + greet[randomRank] + \"</p>\";\r\n    } else if (\r\n        words.includes(\"GOODBYE\") ||\r\n        words.includes(\"BYE\") ||\r\n        words.includes(\"FAREWELL\") ||\r\n        userComment.search(\"See you later\") > -1\r\n    ) {\r\n        if (phase != 1) {\r\n            const randomRank = Math.floor(Math.random() * interrupted.length);\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>\" + interrupted[randomRank] + \"</p>\";\r\n            phase = 0;\r\n        } else {\r\n            const randomRank = Math.floor(Math.random() * farewell.length);\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>\" + farewell[randomRank] + \"</p>\";\r\n        }\r\n        phase = 0;\r\n    } else if (phase === 1) {\r\n        let feelingChoice;\r\n\r\n        let feelingScores = [0, 0, 0, 0, 0];\r\n        for (let i = 0; i < emotions.length; i++) {\r\n            negative = 0;\r\n            for (let w in words) {\r\n                if (words[w] === \"NOT\" || words[w] === \"DON'T\") {\r\n                    negative += 1;\r\n                }\r\n                for (let e in emotions) {\r\n                    for (let k in emotions[e]) {\r\n                        if (words[w] === emotions[e][k].toUpperCase()) {\r\n                            if (negative > 0) {\r\n                                feelingScores[e]--;\r\n                                negative--;\r\n                            } else {\r\n                                feelingScores[e]++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        feelingChoice = findHighestScore(feelingScores);\r\n        if (feelingChoice[0] === 0) {\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>I'm not sure what you mean. Can you rephrase that?</p>\";\r\n        } else\r\n            switch (feelingChoice[1]) {\r\n                case 0:\r\n                    phase = 2;\r\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                        \"<p id='TherabotComment'>Describe your happiness.</p>\";\r\n                    break;\r\n                case 1:\r\n                    phase = 3;\r\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                        \"<p id='TherabotComment'>Describe your anger. What is making you angry?</p>\";\r\n                    break;\r\n                case 2:\r\n                    phase = 4;\r\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                        \"<p id='TherabotComment'>Describe your sadness. What is making you sad?</p>\";\r\n                    break;\r\n                case 3:\r\n                    phase = 5;\r\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                        \"<p id='TherabotComment'>Describe your fear. What is scaring you?</p>\";\r\n                    break;\r\n                case 4:\r\n                    phase = 6;\r\n                    document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                        \"<p id='TherabotComment'>Depression is serious, but can be fixed. Can you describe the circustances surrounding your depression?</p>\";\r\n                    break;\r\n            }\r\n\r\n        //Why is user happy?\r\n    } else if (phase === 2) {\r\n        if (\r\n            statement.search(\"JUST KIDDING\") > -1 ||\r\n            statement.search(\"NOT HAPPY\") > -1\r\n        ) {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>That's too bad. How do you actually feel?</p>\";\r\n        } else {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>I am glad you feel this way!</p>\";\r\n        }\r\n    }\r\n    //Why is user angry?\r\n    else if (phase === 3) {\r\n        if (\r\n            statement.search(\"JUST KIDDING\") > -1 ||\r\n            statement.search(\"NOT ANGRY\") > -1\r\n        ) {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\r\n        } else {\r\n            let responseScores = [0, 0, 0];\r\n            for (let u in userIsAngry) {\r\n                negative = 0;\r\n                for (let w in words) {\r\n                    for (let k in userIsAngry[u]) {\r\n                        if (words[w] === userIsAngry[u][k].toUpperCase()) {\r\n                            responseScores[u]++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const responseChoice = findHighestScore(responseScores);\r\n            if (responseChoice[0] === 0) {\r\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\r\n            } else {\r\n                switch (responseChoice[1]) {\r\n                    case 0:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to be frustrated.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 1:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to be grieving.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 2:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to have anger issues.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //Why is user sad?\r\n    else if (phase === 4) {\r\n        if (\r\n            statement.search(\"JUST KIDDING\") > -1 ||\r\n            statement.search(\"NOT SAD\") > -1\r\n        ) {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\r\n        } else {\r\n            let responseScores = [0, 0, 0];\r\n            for (let u in userIsSad) {\r\n                negative = 0;\r\n                for (let w in words) {\r\n                    for (let k in userIsSad[u]) {\r\n                        if (words[w] === userIsSad[u][k].toUpperCase()) {\r\n                            responseScores[u]++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const responseChoice = findHighestScore(responseScores);\r\n            if (responseChoice[0] === 0) {\r\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\r\n            } else {\r\n                switch (responseChoice[1]) {\r\n                    case 0:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to have medical issues.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 1:\r\n                        phase = 6;\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>Your sadness might actually be depression. Can you describe the circumstances surrounding your depression?</p>\";\r\n                        break;\r\n                    case 2:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to be grieving.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //Why is user scared?\r\n    else if (phase === 5) {\r\n        if (\r\n            statement.search(\"JUST KIDDING\") > -1 ||\r\n            statement.search(\"NOT SCARED\") > -1\r\n        ) {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\r\n        } else {\r\n            let responseScores = [0, 0, 0];\r\n            for (let u in userIsScared) {\r\n                negative = 0;\r\n                for (let w in words) {\r\n                    for (let k in userIsScared[u]) {\r\n                        if (words[w] === userIsScared[u][k].toUpperCase()) {\r\n                            responseScores[u]++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const responseChoice = findHighestScore(responseScores);\r\n            if (responseChoice[0] === 0) {\r\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                    \"<p id='TherabotComment'>I'm not sure what you mean.</p>\";\r\n            } else {\r\n                switch (responseChoice[1]) {\r\n                    case 0:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to have panic attacks.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 1:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to be anxious.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 2:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You seem to have a phobia.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        //Why is user depressed?\r\n    } else if (phase === 6) {\r\n        if (\r\n            statement.search(\"JUST KIDDING\") > -1 ||\r\n            statement.search(\"NOT DEPRESSED\") > -1\r\n        ) {\r\n            phase = 1;\r\n            document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                \"<p id='TherabotComment'>Alright then. How do you actually feel?</p>\";\r\n        } else {\r\n            let responseScores = [0, 0, 0];\r\n            for (let u in userIsDepressed) {\r\n                negative = 0;\r\n                for (let w in words) {\r\n                    for (let k in userIsDepressed[u]) {\r\n                        if (words[w] === userIsDepressed[u][k].toUpperCase()) {\r\n                            responseScores[u]++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const responseChoice = findHighestScore(responseScores);\r\n            if (responseChoice[0] === 0) {\r\n                document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                    \"<p id='TherabotComment'>I'm not sure what you mean</p>\";\r\n            } else {\r\n                switch (responseChoice[1]) {\r\n                    case 0:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>You might have some unresolved past trauma. It might be beneficial to discuss these with a therapist or loved one.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 1:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>Depression may run in your family. It might be best to seek medical help.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                    case 2:\r\n                        document.getElementById(\"ConvoHistory\")!.innerHTML +=\r\n                            \"<p id='TherabotComment'>Your depression may be linked to your drug use. Thirty-percent of drug users experience depression. It might be best to stop use until you recover from your depression.</p>\";\r\n                        phase = 0;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return phase;\r\n};\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/IndexStyle.css\";\r\nimport firebase from \"../firebase\";\r\n\r\nexport default function UserLoginBox() {\r\n    let history = useHistory();\r\n    function nextPath(path: any) {\r\n        history.push(path);\r\n    }\r\n\r\n    firebase.auth().onAuthStateChanged(firebaseUser => {\r\n        if (firebaseUser) {\r\n            console.log(firebaseUser);\r\n            // TODO: method to not allow random ppl to type to bot\r\n            // without signing in first\r\n        } else {\r\n            console.log(\"No user signed in currently\");\r\n        }\r\n    });\r\n\r\n    function CheckSignIn() {\r\n        const getValue = (id: string) =>\r\n            (document.getElementById(id)! as HTMLInputElement).value;\r\n        const email = getValue(\"email\");\r\n        const pass = getValue(\"password\");\r\n\r\n        if (email === \"\" || pass === \"\") {\r\n            document.getElementById(\"SignInNotSuccess\")!.innerHTML =\r\n                \"Cannot sign in. Please make sure all fields are filled out.\";\r\n            document.getElementById(\"SignInNotSuccess\")!.style.display =\r\n                \"block\";\r\n        } else {\r\n            // Sign In\r\n            const promise = firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(email, pass);\r\n\r\n            promise\r\n                .then(result => {\r\n                    document.getElementById(\"SignInNotSuccess\")!.style.display =\r\n                        \"none\";\r\n                    nextPath(\"/talk\");\r\n                })\r\n                .catch(e => {\r\n                    document.getElementById(\"SignInNotSuccess\")!.innerHTML =\r\n                        e.message;\r\n                    document.getElementById(\"SignInNotSuccess\")!.style.display =\r\n                        \"block\";\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Therabot</h1>\r\n            <div id=\"MainBox\">\r\n                <div id=\"MainBoxBanner\">\r\n                    <div id=\"MainTextBox\">User Login</div>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"email\"\r\n                    placeholder=\"Enter Email Address\"\r\n                />\r\n                <input type=\"text\" id=\"password\" placeholder=\"Enter Password\" />\r\n                <div id=\"UserLoginButtons\">\r\n                    <button\r\n                        className=\"RegisterButton\"\r\n                        type=\"button\"\r\n                        onClick={() => nextPath(\"/register\")}\r\n                    >\r\n                        Click here to register\r\n                    </button>\r\n                    <button\r\n                        className=\"SignInButton\"\r\n                        type=\"submit\"\r\n                        onClick={CheckSignIn}\r\n                    >\r\n                        Sign in\r\n                    </button>\r\n                </div>\r\n                <div id=\"SignInNotSuccess\" style={{ display: \"none\" }}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/RegisterPageStyle.css\";\r\nimport firebase from \"../firebase\";\r\n\r\nexport default function Register() {\r\n    let history = useHistory();\r\n    function nextPath(path: any) {\r\n        history.push(path);\r\n    }\r\n\r\n    function checkSuccessReg() {\r\n        const getValue = (id: string) =>\r\n            (document.getElementById(id)! as HTMLInputElement).value;\r\n\r\n        const email = getValue(\"Email\");\r\n        const pass = getValue(\"Password\");\r\n\r\n        if (email === \"\" || pass === \"\") {\r\n            document.getElementById(\"success\")!.style.display = \"none\";\r\n            document.getElementById(\"notsuccess\")!.innerHTML =\r\n                \"Registration was not successful. Please make sure all fields are filled out.\";\r\n            document.getElementById(\"notsuccess\")!.style.display = \"block\";\r\n        } else {\r\n            // Create user\r\n            const auth = firebase.auth();\r\n            const promise = auth.createUserWithEmailAndPassword(email, pass);\r\n            promise\r\n                .then(result => {\r\n                    document.getElementById(\"success\")!.style.display = \"block\";\r\n                    document.getElementById(\"BackToLogin\")!.style.display =\r\n                        \"block\";\r\n                    document.getElementById(\"notsuccess\")!.style.display =\r\n                        \"none\";\r\n                    document.getElementById(\"DoneButton\")!.style.display =\r\n                        \"none\";\r\n                })\r\n                .catch(e => {\r\n                    document.getElementById(\"success\")!.style.display = \"none\";\r\n                    document.getElementById(\"notsuccess\")!.innerHTML =\r\n                        e.message;\r\n                    document.getElementById(\"notsuccess\")!.style.display =\r\n                        \"block\";\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to Therabot</h1>\r\n            <div id=\"MainBox\">\r\n                <div id=\"MainBoxBanner\">\r\n                    <div id=\"MainTextBox\">Register</div>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"Email\"\r\n                    placeholder=\"Enter an email address\"\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"Password\"\r\n                    placeholder=\"Enter a password\"\r\n                />\r\n                <div id=\"buttonElement\">\r\n                    <button\r\n                        id=\"DoneButton\"\r\n                        type=\"button\"\r\n                        onClick={checkSuccessReg}\r\n                    >\r\n                        Done\r\n                    </button>\r\n                </div>\r\n                <div id=\"success\" style={{ display: \"none\" }}>\r\n                    Success! You are now registered to use Therabot!\r\n                </div>\r\n                <div id=\"notsuccess\" style={{ display: \"none\" }}></div>\r\n                <button\r\n                    id=\"BackToLogin\"\r\n                    type=\"button\"\r\n                    onClick={() => nextPath(\"/\")}\r\n                    style={{ display: \"none\" }}\r\n                >\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport Conversation from \"./components/Conversation\";\r\nimport UserLoginBox from \"./components/UserLoginBox\";\r\nimport Register from \"./components/Register\";\r\nimport \"./css/MainStyle.css\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Route exact path=\"/\" component={UserLoginBox} />\r\n            <Route path=\"/register\" component={Register} />\r\n            <Route path=\"/talk\" component={Conversation} />\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}